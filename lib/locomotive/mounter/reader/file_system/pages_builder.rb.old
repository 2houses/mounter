module Locomotive
  module Mounter
    module Reader
     module FileSystem

       class PagesBuilder < Base

         attr_accessor :list, :pages_from_config

         def initialize(runner)
           self.list, self.pages_from_config = [], {}
           super
         end

         # Build the tree of pages based on the data specified by the config/site.yml file
         # of the template but also with the filesystem structure
         #
         # @return [ Array ] List of pages. The index page is the first element and the 404 one is the last element.
         #
         def build
           (self.config['site']['pages'] || []).each do |_page|
             self.pages_from_config[_page.keys.first] = _page.values.first
           end

           puts self.pages_from_config.inspect

           self.fetch_element 'index'

           self.list
         end

         def fetch_element(fullpath, parent = nil)
           # does the page exist in the site.yml file
           attributes = self.pages_from_config.delete(fullpath)

           # look for a template in the filesystem
           template_filepath = self.fetch_template_filepath(fullpath)

           if attributes || template_filepath
             # the page does exist
             page = self.build_page(fullpath, parent, attributes)

             # do not forget to set its template path
             page.template_filepath = template_filepath if template_filepath

             self.list << page

             puts "[fetch_element] page = #{page.inspect}"

             self.fetch_children(page)
           end
         end

         def fetch_children(page)
           pages = {}

           # from config
           self.pages_from_config.to_a.each_with_index do |attributes, position|
             puts attributes.inspect
             # make sure to only get the children
             if self.is_subpage_of?(attributes.first, page.fullpath)
               pages[attributes.first.dasherize] = (attributes.last || {}).merge({
                 fullpath: attributes.first,
                 position: position
               })
             end
           end

           # from filesystem
           # puts "--> #{File.join(File.dirname(page.safe_fullpath), '*.{liquid,haml}').inspect}"
           Dir.glob(File.join(pages_root_dir, File.dirname(page.safe_fullpath), '*.{liquid,haml}')).each do |filepath|
             fullpath = self.filepath_to_fullpath(filepath)

             puts "[fetch_children] child file -> #{filepath} / #{fullpath}"

             if self.is_subpage_of?(fullpath, page.fullpath)
               (pages[fullpath] ||= {}).merge!(fullpath: fullpath, template_filepath: filepath)
             end

           end

           puts "children => #{pages.inspect}"

           raise 'done'
         end

         protected

         # Tell is a page described by its fullpath is a sub page of a parent page
         # also described by its fullpath
         #
         # @param [ String ] fullpath The full path of the page to test
         # @param [ String ] parent_fullpath The full path of the parent page
         #
         # @return [ Boolean] True if the page is a sub page of the parent one
         #
         def is_subpage_of?(fullpath, parent_fullpath)
           return false if %w(index 404).include?(fullpath)

           if parent_fullpath == 'index' && fullpath.split('/').size == 1
             return true
           end

           File.dirname(fullpath.dasherize) == parent_fullpath.dasherize
         end

         # Build a new page object. It also looks for other localized
         # version of the template in the filesystem.
         #
         # @param [ String ] fullpath The full path of the page
         # @param [ Object ] parent The page parent (nil for the index page)
         #
         # @return [ Object ] The new page instance
         #
         def build_page(fullpath, parent, attributes)
           (attributes ||= {}).merge! parent: parent, fullpath: fullpath

           Locomotive::Mounter::Models::Page.new(attributes).tap do |page|
             self.mounting_point.locales.each do |locale|
               next if locale.to_s == self.mounting_point.default_locale.to_s

               if template_filepath = self.fetch_template_filepath(fullpath, locale)
                 I18n.with_locale(locale) do
                   page.template_filepath = template_filepath
                 end
               end
             end
           end
         end

         # Check if there is a template on the filesystem corresponding to the fullpath.
         # This template can be localized or not depending on the
         # 2 different names are checked: one with the simple .liquid extension,
         # the other one with the .liquid.haml extensions.
         # If no files are found, it returns nil.
         #
         # Note: during the search, if there are dashes in the fullpath given in parameter,
         # they will be replaced by underscores in the filepath
         #
         # @param [ String ] fullpath The fullpath of the page
         #
         # @return [ String ] The complete file path to the template. Nil if not found
         #
         def fetch_template_filepath(fullpath, locale = nil)
           # puts "[fetch_template_filepath] #{fullpath.inspect} / #{self.runner.path}"

           path = File.join(self.pages_root_dir, fullpath.underscore)

           ['liquid', 'liquid.haml'].each do |extension|
             filepath = locale ? "#{path}.#{locale}" : path

             filepath += ".#{extension}"

             # puts "[fetch_template_filepath]  filepath = #{filepath.inspect}"

             return filepath if File.exists?(filepath)
           end

           nil
         end

         # Return the directory where all the templates of
         # pages are stored in the filesystem.
         #
         # @return [ String ] The root directory
         #
         def pages_root_dir
           File.join(self.runner.path, 'app', 'views', 'pages')
         end

         # Take the path to a file on the filesystem
         # and return its matching value for a Page.
         #
         # @param [ String ] filepath The path to the file
         #
         # @return [ String ] The fullpath of the page
         #
         def filepath_to_fullpath(filepath)
           fullpath = filepath.gsub(File.join(self.pages_root_dir, '/'), '')

           fullpath.gsub!(/^\.\//, '')

           fullpath.split('.').first.dasherize
         end

       end

      end
    end
  end
end